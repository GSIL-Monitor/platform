<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!--
        注意:
            本POM文件文件为多项目的父POM，因此请不要随意改动，
            如果需要加其他依赖请添加在该项目的POM内，
            如果父POM的依赖无法满足自己的要求请自行在项目POM内添加所需依赖，会自动覆盖POM的依赖
    -->
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.1.RELEASE</version>
    </parent>
    <groupId>cn.laeni.platform</groupId>
    <artifactId>platform</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <modules>
        <module>goods</module>
        <module>ossfile</module>
        <module>user</module>
    </modules>

    <name>platform</name>
    <description>Demo project for Spring Boot</description>
    <!-- FIXME change it to the project's website -->
    <url>http://www.laeni.cn</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-cloud.version>Greenwich.M3</spring-cloud.version>
        <dubbo-version>0.2.1-SNAPSHOT</dubbo-version>
    </properties>

    <!-- 阿里云私服配置, 当部署到私服的时候使用 -->
    <distributionManagement>
        <repository>
            <id>rdc-releases</id>
            <name>29461-release-UOYUhD</name>
            <url>https://repo.rdc.aliyun.com/repository/29461-release-UOYUhD</url>
        </repository>
        <snapshotRepository>
            <id>rdc-snapshots</id>
            <name>Internal Snapshot Repository</name>
            <url>https://repo.rdc.aliyun.com/repository/29461-snapshot-LeRipn</url>
        </snapshotRepository>
    </distributionManagement>

    <dependencies>
        <!-- start 自定义依赖区==================================================================================================== -->
        <!-- 自定义工具类 -->
        <dependency>
            <groupId>cn.laeni</groupId>
            <artifactId>utils</artifactId>
            <version>0.0.1-SNAPSHOT</version>
        </dependency>
        <!-- 公共接口 -->
        <dependency>
            <groupId>cn.laeni.platform</groupId>
            <artifactId>entity-interface</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <!-- end 自定义依赖区==================================================================================================== -->

        <!-- start 非必须依赖区==================================================================================================== -->
        <!-- apm-toolkit-trace(监控) -->
        <dependency>
            <groupId>org.apache.skywalking</groupId>
            <artifactId>apm-toolkit-trace</artifactId>
            <version>6.0.0-alpha</version>
        </dependency>
        <!-- end 非必须依赖区==================================================================================================== -->


        <!-- 阿里巴巴JSON框架 -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.54</version>
        </dependency>

        <!--  start MyBatis-->
        <!-- spring-boot: springBoot可以使用SpringMVC方式代替 -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>1.3.2</version>
        </dependency>
        <!-- 数据源: druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>1.1.11</version>
        </dependency>
        <!-- JDBC-MySQL驱动: 数据源需要JDBC驱动支持 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
        </dependency>
        <!--  end MyBatis-->

        <!-- start Redis依赖 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <!-- Session存入Rdis依赖【加入此配置后，如果SpringBoot无法正确与Redis连接将导致无法启动(确定需要Redis时可检查Redis配置是否正确且Redis服务器是否启动)】 -->
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-data-redis</artifactId>
        </dependency>
        <!-- end Redis依赖 -->

        <!-- start 模板引擎 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!-- end 模板引擎 -->

        <!-- 热部署模块 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
            <scope>runtime</scope>
        </dependency>

        <!-- Ribbon -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
        </dependency>

        <!-- Feign -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

        <!-- start SpringBoot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <!-- 监控 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <!-- end SpringBoot -->

        <!-- start Dubbo -->
        <dependency>
            <groupId>com.alibaba.boot</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
            <version>${dubbo-version}</version>
        </dependency>
        <!-- end Dubbo -->

        <!-- start Zookeeper -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zookeeper-all</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.zookeeper</groupId>
                    <artifactId>zookeeper</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- 通信协议 -->
        <dependency>
            <groupId>com.github.sgroschupf</groupId>
            <artifactId>zkclient</artifactId>
            <version>0.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.4.12</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- end Zookeeper -->

        <!-- 测试 -->
        <!--<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-contract-verifier</artifactId>
            <scope>test</scope>
        </dependency>-->
        <!-- SpringBoot-test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!--指定java和test目录(可省略且可由<resources>标签代替) -->
        <!--<sourceDirectory>src/main/java</sourceDirectory> <testSourceDirectory>src/test/java</testSourceDirectory> -->

        <!-- 将配置文件复制到运行路径下 -->
        <resources>
            <resource>
                <directory>${project.basedir}/src/main/java</directory><!-- 设置源码路径 -->
                <includes>
                    <!-- 将配置文件复制到运行路径下 -->
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <!-- 指定配置文件存放目录 -->
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
            </resource>
        </resources>
        <!-- 可仿照上述配置test信息 -->
        <testResources/>

        <plugins>
            <!--指定Java版本 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <!--Mybatis-generator插件,用于自动生成Mapper和POJO -->
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.2</version>
                <configuration>
                    <!--配置文件的位置,可省略 -->
                    <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>
                    <verbose>true</verbose>
                    <overwrite>true</overwrite>
                </configuration>
                <!-- 可省略 -->
                <dependencies>
                    <dependency>
                        <groupId>org.mybatis.generator</groupId>
                        <artifactId>mybatis-generator-core</artifactId>
                        <version>1.3.2</version>
                    </dependency>
                </dependencies>
            </plugin>

            <!-- 使用maven打包(打包时将Tomcat一起打包) -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!-- 热部署支持 -->
                <!-- <configuration>
                    <fork>true</fork>
                </configuration> -->
            </plugin>
        </plugins>

    </build>

    <repositories>
        <repository>
            <id>spring-milestones</id>
            <name>Spring Milestones</name>
            <url>https://repo.spring.io/milestone</url>
        </repository>
    </repositories>

</project>
